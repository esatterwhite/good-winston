var  Hoek, SafeStringify, internals;

Hoek = require('hoek');

SafeStringify = require('json-stringify-safe');

internals = {
  defaults: {
    error_level: 'error',
    ops_level: 'info',
    request_level: 'info',
    response_level: 'info',
    other_level: 'info'
  }
};

GoodWinston = (function() {
  function GoodWinston(events, winston, options) {
    var settings;
    if (options == null) {
      options = {};
    }
    Hoek.assert(this.constructor === GoodWinston, 'GoodWinston must be created with new');
    Hoek.assert(winston, 'winston logger must not be null');
    settings = Hoek.applyToDefaults(internals.defaults, options);
    this.winston = winston;
    this.error_level = settings.error_level;
    this.ops_level = settings.ops_level;
    this.request_level = settings.request_level;
    this.response_level = settings.response_level;
    this.other_level = settings.other_level;
    GoodReporter.call(this, events, settings);
  }

  return GoodWinston;

})();

Hoek.inherits(GoodWinston, GoodReporter);

GoodWinston.prototype._logResponse = function(event, tags) {
  var query, responsePayload;
  if (tags == null) {
    tags = [];
  }
  query = event.query ? JSON.stringify(event.query) : '';
  responsePayload = '';
  if (typeof event.responsePayload === 'object' && event.responsePayload) {
    responsePayload = 'response payload: ' + SafeStringify(event.responsePayload);
  }
  return this.winston[this.response_level](("[" + tags + "], ") + Hoek.format('%s: %s %s %s %s (%sms) %s', event.instance, event.method, event.path, query, event.statusCode, event.responseTime, responsePayload));
};

GoodWinston.prototype._report = function(event, data) {
  if (event === 'response') {
    return this._logResponse(data, data.tags);
  } else if (event === 'ops') {
    return this.winston[this.ops_level](Hoek.format('memory: %sMb, uptime (seconds): %s, load: %s', Math.round(data.proc.mem.rss / (1024 * 1024)), data.proc.uptime, data.os.load));
  } else if (event === 'error') {
    return this.winston[this.error_level]('message: ' + data.error.message + ' stack: ' + data.error.stack);
  } else if (event === 'request' || event === 'log') {
    return this.winston[this.request_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else if (data.data) {
    return this.winston[this.other_level]('data: ' + (typeof data.data === 'object' ? SafeStringify(data.data) : data.data));
  } else {
    return this.winston[this.other_level]('data: (none)');
  }
};

GoodWinston.prototype.stop = function() {};

GoodWinston.prototype.init = function(readstream, emitter, callback) {
  readstream.on('data', (function(_this) {
    return function(chunk) {
      return _this._handleEvent(chunk.event, chunk);
    };
  })(this));
  emitter.on('stop', (function(_this) {
    return function() {
      return _this.stop();
    };
  })(this));
  return callback(null);
};

module.exports = exports = GoodWinston;

//# sourceMappingURL=data:application/json;base64,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LFFBQUEsR0FBVyxDQUFHLE1BQUEsQ0FBQSxJQUFXLENBQUMsSUFBWixLQUFvQixRQUF2QixHQUFxQyxhQUFBLENBQWMsSUFBSSxDQUFDLElBQW5CLENBQXJDLEdBQW1FLElBQUksQ0FBQyxJQUF4RSxDQUFsQyxFQURHO0dBQUEsTUFBQTtXQUdILElBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQyxDQUFBLFdBQUQsQ0FBVCxDQUF1QixjQUF2QixFQUhHO0dBYmdCO0FBQUEsQ0F6Q3ZCLENBQUE7O0FBQUEsV0EyRFcsQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFBLEdBQUEsQ0EzRHBCLENBQUE7O0FBQUEsV0E4RFcsQ0FBQSxTQUFFLENBQUEsSUFBYixHQUFvQixTQUFDLFVBQUQsRUFBYSxPQUFiLEVBQXNCLFFBQXRCLEdBQUE7QUFDbEIsRUFBQSxVQUFVLENBQUMsRUFBWCxDQUFjLE1BQWQsRUFBc0IsQ0FBQSxTQUFBLEtBQUEsR0FBQTtXQUFBLFNBQUMsS0FBRCxHQUFBO2FBQ3BCLEtBQUMsQ0FBQSxZQUFELENBQWMsS0FBSyxDQUFDLEtBQXBCLEVBQTJCLEtBQTNCLEVBRG9CO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBdEIsQ0FBQSxDQUFBO0FBQUEsRUFHQSxPQUFPLENBQUMsRUFBUixDQUFXLE1BQVgsRUFBbUIsQ0FBQSxTQUFBLEtBQUEsR0FBQTtXQUFBLFNBQUEsR0FBQTthQUNqQixLQUFDLENBQUEsSUFBRCxDQUFBLEVBRGlCO0lBQUEsRUFBQTtFQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkIsQ0FIQSxDQUFBO1NBTUEsUUFBQSxDQUFTLElBQVQsRUFQa0I7QUFBQSxDQTlEcEIsQ0FBQTs7QUFBQSxNQXVFTSxDQUFDLE9BQVAsR0FBaUIsT0FBQSxHQUFVLFdBdkUzQixDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiR29vZFJlcG9ydGVyID0gcmVxdWlyZSAnZ29vZC1yZXBvcnRlcidcbkhvZWsgPSByZXF1aXJlICdob2VrJ1xuU2FmZVN0cmluZ2lmeSA9IHJlcXVpcmUgJ2pzb24tc3RyaW5naWZ5LXNhZmUnXG5cbmludGVybmFscyA9XG4gIGRlZmF1bHRzOlxuICAgIGVycm9yX2xldmVsOiAnZXJyb3InXG4gICAgb3BzX2xldmVsOiAnaW5mbydcbiAgICByZXF1ZXN0X2xldmVsOiAnaW5mbydcbiAgICByZXNwb25zZV9sZXZlbDogJ2luZm8nXG4gICAgb3RoZXJfbGV2ZWw6ICdpbmZvJ1xuXG5jbGFzcyBHb29kV2luc3RvblxuICBjb25zdHJ1Y3RvcjogKGV2ZW50cywgd2luc3Rvbiwgb3B0aW9ucyA9IHt9KSAtPlxuICAgIEhvZWsuYXNzZXJ0IEBjb25zdHJ1Y3RvciA9PSBHb29kV2luc3RvbiwgJ0dvb2RXaW5zdG9uIG11c3QgYmUgY3JlYXRlZCB3aXRoIG5ldydcbiAgICBIb2VrLmFzc2VydCB3aW5zdG9uLCAnd2luc3RvbiBsb2dnZXIgbXVzdCBub3QgYmUgbnVsbCdcbiAgICBzZXR0aW5ncyA9IEhvZWsuYXBwbHlUb0RlZmF1bHRzIGludGVybmFscy5kZWZhdWx0cywgb3B0aW9uc1xuICAgIEB3aW5zdG9uID0gd2luc3RvblxuICAgIEBlcnJvcl9sZXZlbCA9IHNldHRpbmdzLmVycm9yX2xldmVsXG4gICAgQG9wc19sZXZlbCA9IHNldHRpbmdzLm9wc19sZXZlbFxuICAgIEByZXF1ZXN0X2xldmVsID0gc2V0dGluZ3MucmVxdWVzdF9sZXZlbFxuICAgIEByZXNwb25zZV9sZXZlbCA9IHNldHRpbmdzLnJlc3BvbnNlX2xldmVsXG4gICAgQG90aGVyX2xldmVsID0gc2V0dGluZ3Mub3RoZXJfbGV2ZWxcbiAgICBHb29kUmVwb3J0ZXIuY2FsbCB0aGlzLCBldmVudHMsIHNldHRpbmdzXG5cbkhvZWsuaW5oZXJpdHMgR29vZFdpbnN0b24sIEdvb2RSZXBvcnRlclxuXG5Hb29kV2luc3Rvbjo6X2xvZ1Jlc3BvbnNlID0gKGV2ZW50LCB0YWdzPVtdKSAtPlxuICBxdWVyeSA9IGlmIGV2ZW50LnF1ZXJ5IHRoZW4gSlNPTi5zdHJpbmdpZnkoZXZlbnQucXVlcnkpIGVsc2UgJydcbiAgcmVzcG9uc2VQYXlsb2FkID0gJydcbiAgaWYgdHlwZW9mIGV2ZW50LnJlc3BvbnNlUGF5bG9hZCA9PSAnb2JqZWN0JyBhbmQgZXZlbnQucmVzcG9uc2VQYXlsb2FkXG4gICAgcmVzcG9uc2VQYXlsb2FkID0gJ3Jlc3BvbnNlIHBheWxvYWQ6ICcgKyBTYWZlU3RyaW5naWZ5IGV2ZW50LnJlc3BvbnNlUGF5bG9hZFxuICBAd2luc3RvbltAcmVzcG9uc2VfbGV2ZWxdIFwiWyN7dGFnc31dLCBcIiArIEhvZWsuZm9ybWF0ICclczogJXMgJXMgJXMgJXMgKCVzbXMpICVzJyxcbiAgICBldmVudC5pbnN0YW5jZSxcbiAgICBldmVudC5tZXRob2QsXG4gICAgZXZlbnQucGF0aCxcbiAgICBxdWVyeSxcbiAgICBldmVudC5zdGF0dXNDb2RlLFxuICAgIGV2ZW50LnJlc3BvbnNlVGltZSxcbiAgICByZXNwb25zZVBheWxvYWRcblxuR29vZFdpbnN0b246Ol9yZXBvcnQgPSAoZXZlbnQsIGRhdGEpIC0+XG4gIGlmIGV2ZW50ID09ICdyZXNwb25zZSdcbiAgICBAX2xvZ1Jlc3BvbnNlIGRhdGEsIGRhdGEudGFnc1xuICBlbHNlIGlmIGV2ZW50ID09ICdvcHMnXG4gICAgQHdpbnN0b25bQG9wc19sZXZlbF0gSG9lay5mb3JtYXQgJ21lbW9yeTogJXNNYiwgdXB0aW1lIChzZWNvbmRzKTogJXMsIGxvYWQ6ICVzJyxcbiAgICAgIE1hdGgucm91bmQoZGF0YS5wcm9jLm1lbS5yc3MgLyAoMTAyNCAqIDEwMjQpKSxcbiAgICAgIGRhdGEucHJvYy51cHRpbWUsXG4gICAgICBkYXRhLm9zLmxvYWRcbiAgZWxzZSBpZiBldmVudCA9PSAnZXJyb3InXG4gICAgQHdpbnN0b25bQGVycm9yX2xldmVsXSAnbWVzc2FnZTogJyArIGRhdGEuZXJyb3IubWVzc2FnZSArICcgc3RhY2s6ICcgKyBkYXRhLmVycm9yLnN0YWNrXG4gIGVsc2UgaWYgZXZlbnQgPT0gJ3JlcXVlc3QnIG9yIGV2ZW50ID09ICdsb2cnXG4gICAgQHdpbnN0b25bQHJlcXVlc3RfbGV2ZWxdICdkYXRhOiAnICsgaWYgdHlwZW9mIGRhdGEuZGF0YSA9PSAnb2JqZWN0JyB0aGVuIFNhZmVTdHJpbmdpZnkoZGF0YS5kYXRhKSBlbHNlIGRhdGEuZGF0YVxuICAjIEV2ZW50IHRoYXQgaXMgdW5rbm93biB0byBnb29kLWNvbnNvbGUsIHRyeSBhIGRlZnVhbHQuXG4gIGVsc2UgaWYgZGF0YS5kYXRhXG4gICAgQHdpbnN0b25bQG90aGVyX2xldmVsXSAnZGF0YTogJyArIGlmIHR5cGVvZiBkYXRhLmRhdGEgPT0gJ29iamVjdCcgdGhlbiBTYWZlU3RyaW5naWZ5KGRhdGEuZGF0YSkgZWxzZSBkYXRhLmRhdGFcbiAgZWxzZVxuICAgIEB3aW5zdG9uW0BvdGhlcl9sZXZlbF0gJ2RhdGE6IChub25lKSdcblxuR29vZFdpbnN0b246OnN0b3AgPSAoKSAtPlxuICByZXR1cm5cblxuR29vZFdpbnN0b246OmluaXQgPSAocmVhZHN0cmVhbSwgZW1pdHRlciwgY2FsbGJhY2spIC0+XG4gIHJlYWRzdHJlYW0ub24gJ2RhdGEnLCAoY2h1bmspID0+XG4gICAgQF9oYW5kbGVFdmVudCBjaHVuay5ldmVudCwgY2h1bmtcblxuICBlbWl0dGVyLm9uICdzdG9wJywgKCkgPT5cbiAgICBAc3RvcCgpXG5cbiAgY2FsbGJhY2sgbnVsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBHb29kV2luc3RvblxuIl19